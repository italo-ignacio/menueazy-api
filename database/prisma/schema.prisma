generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:123@localhost:5432/menueazy"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./aa.svg"
//   format   = "svg"
// }

model RegisterRequest {
  id          Int     @id @default(autoincrement())
  email       String  @db.VarChar(255)
  name        String  @db.VarChar(255)
  phone       String  @db.VarChar(25)
  companyName String  @map("company_name") @db.VarChar(255)
  description String? @db.Text()
  code        String  @unique @default(uuid())
  canRegister Boolean @default(false) @map("can_register")

  currency   Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  currencyId Int      @map("currency_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("register_request")
}

model Currency {
  id     Int    @id @default(autoincrement())
  code   String @unique @db.VarChar(3)
  name   String @db.VarChar(50)
  symbol String @db.VarChar(5)

  planPriceList       PlanPrice[]
  companyList         Company[]
  registerRequestList RegisterRequest[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([code])
  @@map("currency")
}

model Plan {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String? @db.Text()

  planPriceList    PlanPrice[]
  subscriptionList Subscription[]

  minimumOfRestaurant Int @map("minimum_of_restaurant")
  minimumOfProduct    Int @map("minimum_of_product")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("plan")
}

model PlanPrice {
  id Int @id @default(autoincrement())

  plan   Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId Int  @map("plan_id")

  monthlyPrice      Decimal @map("monthly_price") @db.Decimal(10, 2) // @default(99.98)
  priceOfRestaurant Decimal @map("price_of_restaurant") @db.Decimal(10, 2) //@default(69.99)
  priceOfProduct    Decimal @map("price_of_product") @db.Decimal(10, 2) // @default(0.99) 
  discount          Decimal @db.Decimal(10, 2)

  currency   Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  currencyId Int      @map("currency_id")

  period PlanPricePeriod

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@unique([planId, currencyId])
  @@index([planId, currencyId])
  @@map("plan_price")
}

enum PlanPricePeriod {
  MONTHLY
  ANNUAL
}

model Coupon {
  id       Int      @id @default(autoincrement())
  code     String   @unique @db.VarChar(20)
  discount Decimal  @db.Decimal(10, 2)
  duration DateTime @map("expires_at") @db.Timestamptz()

  subscriptionCouponList SubscriptionCoupon[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("coupon")
}

model SubscriptionCoupon {
  id Int @id @default(autoincrement())

  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId Int          @map("subscription_id")

  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  couponId Int

  expiresAt DateTime @map("expires_at") @db.Timestamptz()

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("subscription_coupon")
}

model Subscription {
  id Int @id @default(autoincrement())

  company Company?

  plan   Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId Int  @map("plan_id")

  subscriptionCouponList SubscriptionCoupon[]

  price           Decimal @db.Decimal(10, 2)
  restaurantLimit Int     @map("restaurant_limit")
  productLimit    Int     @map("product_limit")

  expiresAt    DateTime @map("expires_at") @db.Timestamptz()
  contactAdmin Boolean  @default(false) @map("contact_admin")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("subscription")
}

model Client {
  id         Int     @id @default(autoincrement())
  email      String  @unique @db.VarChar(255)
  name       String  @db.VarChar(255)
  phone      String? @db.VarChar(25)
  firebaseId String? @unique @map("firebase_id")
  avatarUrl  String? @map("avatar_url") @db.Text()
  isBlocked  Boolean @default(false)

  deviceList        Device[]
  orderList         Order[]
  reviewList        Review[]
  clientReportList  ClientReport[]
  clientAddressList ClientAddress[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([email])
  @@index([firebaseId])
  @@map("client")
}

model ClientReport {
  id          Int     @id @default(autoincrement())
  description String? @db.Text()

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId Int    @map("client_id")

  order   Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId Int?   @unique

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int        @map("restaurant_id")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("client_report")
}

model User {
  id         Int     @id @default(autoincrement())
  firebaseId String  @unique @map("firebase_id")
  email      String  @unique @db.VarChar(255)
  name       String? @db.VarChar(255)
  phone      String? @db.VarChar(25)
  avatarUrl  String? @map("avatar_url") @db.Text()
  role       Role

  deviceList         Device[]
  userRestaurantList UserRestaurant[]
  orderList          Order[]
  clientReportList   ClientReport[]

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int     @map("company_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([email])
  @@index([companyId])
  @@index([firebaseId])
  @@map("user")
}

enum Role {
  ADMIN
  OWNER
  MANAGER
  EMPLOYEE
  DELIVERY_PERSON
}

model Device {
  id         Int      @id @default(autoincrement())
  token      String   @unique @db.Text()
  code       String   @unique @default(uuid())
  lastActive DateTime @default(now()) @map("last_active") @db.Timestamptz()

  client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId Int?    @map("client_id")

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?  @map("user_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([clientId])
  @@index([userId])
  @@index([code])
  @@index([lastActive])
  @@map("device")
}

model UserRestaurant {
  id Int @id @default(autoincrement())

  restaurantRole RestaurantRole @map("restaurant_role")

  user       User       @relation(fields: [userId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  userId       Int @map("user_id")
  restaurantId Int @map("restaurant_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("user_restaurant")
}

enum RestaurantRole {
  EDIT
  VIEW
}

model Restaurant {
  id            Int     @id @default(autoincrement())
  name          String  @db.VarChar(255)
  phone         String  @db.VarChar(25)
  restaurantUrl String  @unique @map("restaurant_url") @db.VarChar(255)
  contactLink   String  @map("contact_link") @db.Text()
  description   String? @db.Text()
  logoUrl       String? @map("logo_url") @db.Text()

  open                    Boolean
  hasDelivery             Boolean
  maxDeliveryDistanceInKm Int     @default(10) @map("max_delivery_distance_in_km")
  minimumOrderValue       Decimal @default(0) @map("minimum_order_value") @db.Decimal(10, 2)
  minimumDeliveryValue    Decimal @default(0) @map("minimum_delivery_value") @db.Decimal(10, 2)
  valueByKmInDelivery     Decimal @default(0) @map("value_by_km_in_delivery") @db.Decimal(10, 2)

  paymentMethodList     PaymentMethod[]
  openingHourList       OpeningHour[]
  productRestaurantList ProductRestaurant[]
  tableList             Table[]
  orderList             Order[]
  userRestaurantList    UserRestaurant[]
  reviewList            Review[]
  clientReportList      ClientReport[]
  restaurantAddressList RestaurantAddress[]
  restaurantCategory    RestaurantCategory[]

  style   Style @relation(fields: [styleId], references: [id])
  styleId Int   @map("style_id")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int     @map("company_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([companyId])
  @@index([restaurantUrl])
  @@map("restaurant")
}

model ClientAddress {
  id Int @id @default(autoincrement())

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("client_address")
}

model RestaurantAddress {
  id Int @id @default(autoincrement())

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("restaurant_address")
}

model OrderAddress {
  id Int @id @default(autoincrement())

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("order_address")
}

model Address {
  id         Int     @id @default(autoincrement())
  street     String  @db.VarChar(255)
  city       String  @db.VarChar(100)
  state      String  @db.VarChar(50)
  number     String  @db.VarChar(30)
  complement String  @db.VarChar(255)
  zipCode    String  @map("zip_code") @db.VarChar(20)
  country    String  @db.VarChar(50)
  latitude   Decimal @db.Decimal(10, 8)
  longitude  Decimal @db.Decimal(11, 8)

  clientAddressList     ClientAddress[]
  restaurantAddressList RestaurantAddress[]
  orderAddressList      OrderAddress[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("address")
}

model OpeningHour {
  id Int @id @default(autoincrement())

  dayOfWeek   DayOfWeek @map("day_of_week")
  openingTime DateTime  @map("opening_time") @db.Timetz()
  closingTime DateTime  @map("closing_time") @db.Timetz()

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int        @map("restaurant_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("opening_hour")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model PaymentMethod {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(100)
  description String  @db.Text()
  logoUrl     String? @map("logo_url") @db.Text()

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int        @map("restaurant_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([restaurantId])
  @@map("payment_method")
}

model Style {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(255)
  generic Boolean @default(false)

  color   Color @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId Int   @map("color_id")

  restaurantList Restaurant[]

  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int?     @map("company_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("style")
}

model Color {
  id Int @id @default(autoincrement())

  primary       String @db.VarChar(7)
  textPrimary   String @map("text_primary") @db.VarChar(7)
  secondary     String @db.VarChar(7)
  textSecondary String @map("text_secondary") @db.VarChar(7)
  background    String @db.VarChar(7)
  text          String @db.VarChar(7)

  styleList Style[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("color")
}

model Company {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text()
  logoUrl     String? @map("logo_url") @db.Text()

  companyUrl     String  @unique @map("company_url") @db.VarChar(255)
  customDomain   String? @unique @map("custom_domain") @db.VarChar(255)
  dnsCNAME       String? @map("dns_cname") @db.VarChar(255)
  domainVerified Boolean @default(false) @map("domain_verified")

  restaurantList Restaurant[]
  styleList      Style[]
  categoryList   Category[]
  productList    Product[]
  userList       User[]
  reviewList     Review[]

  currency   Currency @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  currencyId Int      @map("currency_id")

  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId Int          @unique @map("subscription_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([companyUrl])
  @@index([customDomain])
  @@index([companyUrl, domainVerified])
  @@index([customDomain, domainVerified])
  @@map("company")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String? @db.Text()

  productCategoryList    ProductCategory[]
  restaurantCategoryList RestaurantCategory[]

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int     @map("company_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([companyId])
  @@map("category")
}

model RestaurantCategory {
  id Int @id @default(autoincrement())

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int        @map("restaurant_id")

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @map("category_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("restaurant_category")
}

model ProductCategory {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @map("category_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("product_category")
}

model ProductImage {
  id      Int     @id @default(autoincrement())
  url     String
  primary Boolean @default(false)

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("product_image")
}

model ProductRestaurant {
  id                  Int       @id @default(autoincrement())
  price               Decimal   @db.Decimal(10, 2)
  onlyInRestaurant    Boolean   @default(false) @map("only_in_restaurant")
  valueByKmInDelivery Decimal?  @map("value_by_km_in_delivery") @db.Decimal(10, 2)
  outOfStock          Boolean   @default(false) @map("out_of_stock")
  startSellAt         DateTime  @default(now()) @map("start_sell_at") @db.Timestamptz()
  finishSellAt        DateTime? @map("finish_sell_at") @db.Timestamptz()

  discount         Decimal?  @db.Decimal(10, 2)
  startDiscountAt  DateTime? @map("start_discount_at") @db.Timestamptz()
  finishDiscountAt DateTime? @map("finish_discount_at") @db.Timestamptz()

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int        @map("restaurant_id")

  reviewList Review[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([restaurantId])
  @@index([outOfStock])
  @@index([onlyInRestaurant])
  @@map("product_restaurant")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text()

  productRestaurantList  ProductRestaurant[]
  productOptionGroupList ProductOptionGroup[]
  productImageList       ProductImage[]
  orderProductList       OrderProduct[]
  productCategoryList    ProductCategory[]
  productOptionItemList  ProductOptionItem[]

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int     @map("company_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("product")
}

model ProductOptionGroup {
  id Int @id @default(autoincrement())

  name         String  @db.VarChar(255)
  description  String? @db.Text()
  minSelection Int     @default(0) @map("min_selection")
  maxSelection Int     @default(1) @map("max_selection")
  required     Boolean

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")

  productOptionItemList ProductOptionItem[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("product_option_group")
}

model ProductOptionItem {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text()
  imageUrl    String? @db.Text()

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?     @map("product_id")

  productOptionGroup   ProductOptionGroup @relation(fields: [productOptionGroupId], references: [id], onDelete: Cascade)
  productOptionGroupId Int                @map("product_option_group_id")

  orderProductOptionItemList OrderProductOptionItem[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("product_option_item")
}

model Table {
  id          Int     @id @default(autoincrement())
  code        String  @unique @default(uuid())
  name        String  @db.VarChar(50)
  description String? @db.Text()

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int        @map("restaurant_id")

  orderList Order[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([restaurantId])
  @@map("table")
}

model Order {
  id Int @id @default(autoincrement())

  price         Decimal     @db.Decimal(10, 2)
  total         Decimal     @db.Decimal(10, 2)
  deliveryPrice Decimal?    @map("delivery_price") @db.Decimal(10, 2)
  observation   String?     @db.Text()
  status        OrderStatus
  type          OrderType

  orderProductList OrderProduct[]
  reviewList       Review[]
  clientReport     ClientReport?
  orderAddressList OrderAddress[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int

  deliveryPerson   User? @relation(fields: [deliveryPersonId], references: [id], onDelete: SetNull)
  deliveryPersonId Int?  @map("delivery_person_id")

  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId Int?    @map("client_id")

  table   Table? @relation(fields: [tableId], references: [id], onDelete: SetNull)
  tableId Int?   @map("table_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([status])
  @@index([type, createdAt])
  @@index([status, createdAt])
  @@index([restaurantId, createdAt])
  @@index([clientId, createdAt])
  @@map("order")
}

enum OrderStatus {
  OPENING
  PENDING
  IN_PROGRESS
  ON_THE_WAY
  FINISHED
  CANCELED_BY_RESTAURANT
  CANCELED_BY_CLIENT
}

enum OrderType {
  RESTAURANT
  DELIVERY
}

model OrderProduct {
  id          Int     @id @default(autoincrement())
  observation String? @db.Text()

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderProductOptionItemList OrderProductOptionItem[]

  status ProductStatus @default(PENDING)

  orderId   Int @map("order_id")
  productId Int @map("product_id")

  quantity Int
  price    Decimal @db.Decimal(10, 2)
  subtotal Decimal @db.Decimal(10, 2)

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@index([orderId])
  @@index([productId])
  @@map("order_product")
}

enum ProductStatus {
  PENDING
  PREPARING
  FINISHED
  CANCELED_BY_RESTAURANT
  CANCELED_BY_CLIENT
}

model OrderProductOptionItem {
  id Int @id @default(autoincrement())

  quantity Int

  productOptionItem ProductOptionItem @relation(fields: [productOptionItemId], references: [id], onDelete: Cascade)
  orderProduct      OrderProduct      @relation(fields: [orderProductId], references: [id], onDelete: Cascade)

  orderProductId      Int @map("order_product_id")
  productOptionItemId Int @map("product_option_item_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("order_product_option_item")
}

model Review {
  id          Int    @id @default(autoincrement())
  description String @db.Text()
  rate        Rate

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId Int    @map("client_id")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int     @map("company_id")

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int        @map("restaurant_id")

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  productRestaurant   ProductRestaurant? @relation(fields: [productRestaurantId], references: [id])
  productRestaurantId Int?               @map("product_restaurant_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@unique([clientId, orderId])
  @@index([companyId])
  @@index([restaurantId])
  @@map("review")
}

enum Rate {
  TERRIBLE
  BAD
  AVERAGE
  GOOD
  EXCELLENT
}
